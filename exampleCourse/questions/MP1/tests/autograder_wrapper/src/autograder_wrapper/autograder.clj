(ns autograder-wrapper.autograder
  (:require [clojure.string :as str]))

(defn main
  []
  (def output_results [])
  (try
    (use 'initial.core)
    (do
            (defn testPlus
              []
              (def output_results (conj output_results "Test plus"))
              (def output_results (conj output_results "This test is for the plus function."))
              (def score 0)
              (cond (= (eval '(plus)) 0)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(plus 10)) 10)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(plus 10 20)) 30)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(plus 10 20 30 40 50)) 150)
                (def score (inc score))
                :else 0)
              (def output_results (conj output_results (str score)))
              (def output_results (conj output_results "4"))
              (cond (= (str score) "4")
                (def output_results (conj output_results "Your answer is correct."))
                :else (def output_results (conj output_results "Your answer is invalid.")))
              (def output_results (conj output_results "This function is given, so you should get full points for this function."))
              )
            (defn testSocialistPlus
              []
              (def output_results (conj output_results "Test socialist-plus"))
              (def output_results (conj output_results "This test is for the socialist-plus function."))
              (def score 0)
              (cond (= (eval 'socialist-plus) 1)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(socialist-plus 5)) 6)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(socialist-plus 10 20)) 30)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(socialist-plus 10 20 30)) 59)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(socialist-plus 10 20 30 40)) 98)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(socialist-plus 10 20 30 40 50)) 147)
                (def score (inc score))
                :else 0)
              (def output_results (conj output_results (str score)))
              (def output_results (conj output_results "6"))
              (cond (= (str score) "6")
                (def output_results (conj output_results "Your answer is correct."))
                :else (def output_results (conj output_results "Your answer is invalid.")))
              (def output_results (conj output_results "Hmmm, what do socialists do exactly?."))
              )
            (defn testCapitalistPlus
              []
              (def output_results (conj output_results "Test capitalist-plus"))
              (def output_results (conj output_results "This test is for the capitalist-plus function."))
              (def score 0)
              (cond (= (eval '(capitalist-plus)) -1)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(capitalist-plus 5)) 4)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(capitalist-plus 10 20)) 30)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(capitalist-plus 10 20 30)) 61)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(capitalist-plus 10 20 30 40)) 102)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(capitalist-plus 10 20 30 40 50)) 153)
                (def score (inc score))
                :else 0)
              (def output_results (conj output_results (str score)))
              (def output_results (conj output_results "6"))
              (cond (= (str score) "6")
                (def output_results (conj output_results "Your answer is correct."))
                :else (def output_results (conj output_results "Your answer is invalid.")))
              (def output_results (conj output_results "Hmmm, what do capitalists do exactly?"))
              )
            (defn testCommunistPlus
              []
              (def output_results (conj output_results "Test communist-plus"))
              (def output_results (conj output_results "This test is for the communist-plus function."))
              (def score 0)
              (cond (= (eval '(communist-plus)) 10)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(communist-plus 5)) 10)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(communist-plus 10 20)) 10)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(communist-plus 10 20 30)) 10)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(communist-plus 10 20 30 40)) 10)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(communist-plus 10 20 30 40 50)) 10)
                (def score (inc score))
                :else 0)
              (def output_results (conj output_results (str score)))
              (def output_results (conj output_results "6"))
              (cond (= (str score) "6")
                (def output_results (conj output_results "Your answer is correct."))
                :else (def output_results (conj output_results "Your answer is invalid.")))
              (def output_results (conj output_results "Hmmm, what do communists do exactly?"))
              )
            (defn testPoliticalExtreemistPlus
              []
              (def output_results (conj output_results "Test political-extreemist-plus"))
              (def output_results (conj output_results "This test is for the political-extreemist-plus function."))
              (def score 0)
              (cond (= (eval '(political-extreemist-plus)) 1)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(political-extreemist-plus 5)) 5)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(political-extreemist-plus 10 20)) 200)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(political-extreemist-plus 10 20 30)) 6000)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(political-extreemist-plus 10 20 30 40)) 240000)
                (def score (inc score))
                :else 0)
              (cond (= (eval '(political-extreemist-plus 10 20 30 40 50)) 12000000)
                (def score (inc score))
                :else 0)
              (def output_results (conj output_results (str score)))
              (def output_results (conj output_results "6"))
              (cond (= (str score) "6")
                (def output_results (conj output_results "Your answer is correct."))
                :else (def output_results (conj output_results "Your answer is invalid.")))
              (def output_results (conj output_results "Hmmm, what do communists do exactly?"))
              )
            (testPlus)
            (testSocialistPlus)
            (testCapitalistPlus)
            (testCommunistPlus)
            (testPoliticalExtreemistPlus)
            ) (catch Exception e (def output_results (conj output_results (str "caught exception: " (.getMessage e))))))
  (str/join "\n" output_results)
  )
